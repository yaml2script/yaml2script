variables:
  PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/$TAG"
  DEBIAN_FRONTEND: noninteractive
  APT_GET_INSTALL: "apt-get install -q -y"
  DESCRIPTION: README.md
  PDFMANUAL: manual_yaml2script.pdf
  PDFMANUALURL: "$PACKAGE_REGISTRY_URL/$PDFMANUAL"

stages:
  - pre
  - build_test
  - create_release
  - check_release
  - deploy

.display_env:
  before_script:
    - date
    - cat /etc/os-release

.test_pre-commit_yaml2script_check_01: &test_pre-commit_yaml2script_check_01
  - git config --global init.defaultBranch main
  - repo_dir="$(mktemp -d)"
  - git clone --bare . "$repo_dir"
  - (cd "$repo_dir" && git tag -f latest)
  - tmp_dir="$(mktemp -d)"
  - (cd "$tmp_dir" && git init)
  - cp -p tests/data/01_pre-commit-config.yaml "$tmp_dir"/.pre-commit-config.yaml
  - cp -p tests/data/01_gitlab-ci.yaml "$tmp_dir"/.gitlab-ci.yml
  - |
    sed -i "s#repo: repo_dir#repo: $repo_dir#" "$tmp_dir"/.pre-commit-config.yaml
  - (cd "$tmp_dir" && git add .)
  - (cd "$tmp_dir" && pre-commit run --all-files)

pre-commit:
  stage: pre
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  image:
    name: alpine:latest
  extends: .display_env
  script:
    - apk add --no-cache git npm pre-commit
    - pre-commit --version
    # ignore file, it's a deliberate error test case
    - rm tests/data/03_extract_ruff
    - pre-commit run --all-files

pycodestyle:
  stage: pre
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  image:
    name: alpine:latest
  extends: .display_env
  script:
    - apk add --no-cache py3-pycodestyle
    - pycodestyle --version
    - pycodestyle --show-source --show-pep8 --statistics --verbose .

pylint:
  stage: pre
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  image:
    name: alpine:latest
  extends: .display_env
  script:
    - apk add --no-cache py3-pip py3-pylint py3-yaml
    - pip3 install --break-system-packages recommonmark
    - pylint --version
    - find . -name '*.py' -exec pylint {} +

ruff:
  stage: pre
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  image:
    name: alpine:latest
  extends: .display_env
  script:
    - apk add --no-cache ruff
    - ruff check --unsafe-fixes --diff || echo "!!! todo !!!"
    - ruff check --output-format=full
    - ruff check --select NPY201 --fix --diff || echo "!!! todo !!!"
    - ruff check --select NPY201 --output-format=full

alpine-latest-pipx:
  stage: build_test
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  image:
    name: alpine:latest
  extends: .display_env
  script:
    - apk add --no-cache git npm pipx pre-commit py3-pytest py3-pytest-xdist
    - export PATH="$PATH":~/.local/bin
    - pipx install . shellcheck-py pycodestyle
    - yaml2script --help
    - yaml2script all -parameter_check_command="-e SC1090" .gitlab-ci.yml
    - *test_pre-commit_yaml2script_check_01
    - pytest-3 --numprocesses=auto --verbose tests/main.py
    - pipx uninstall yaml2script

alpine-latest-pip:
  stage: build_test
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  image:
    name: alpine:latest
  extends: .display_env
  script:
    - apk add --no-cache git npm pre-commit py3-pip
    - pip3 install --break-system-packages ".[pycodestyle, shellcheck, test]"
    - yaml2script --help
    - yaml2script all -parameter_check_command="-e SC1090" -verbose .gitlab-ci.yml
    - *test_pre-commit_yaml2script_check_01
    - pytest --numprocesses=auto --verbose tests/main.py

alpine-latest-pip-system-packages:
  stage: build_test
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  image:
    name: alpine:latest
  extends: .display_env
  script:
    - apk add --no-cache git npm pre-commit py3-pip py3-pycodestyle py3-pytest py3-pytest-xdist py3-yaml shellcheck
    - pip3 install --no-deps --break-system-packages .
    - yaml2script --help
    - yaml2script all -parameter_check_command="-e SC1090" .gitlab-ci.yml
    - *test_pre-commit_yaml2script_check_01
    - pytest-3 --numprocesses=auto --verbose tests/main.py
    - pip3 uninstall -y --break-system-packages yaml2script

debian-latest-pipx:
  stage: build_test
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  image:
    name: debian:latest
  extends: .display_env
  script:
    - apt-get update
    - $APT_GET_INSTALL git npm pipx pre-commit python3-pytest python3-pytest-xdist
    - export PATH="$PATH":~/.local/bin
    - pipx install .
    - pipx install shellcheck-py
    - pipx install pycodestyle
    - yaml2script --help
    - yaml2script all -parameter_check_command="-e SC1090" .gitlab-ci.yml
    - *test_pre-commit_yaml2script_check_01
    - pytest-3 --numprocesses=auto --verbose tests/main.py
    - pipx uninstall yaml2script

debian-latest-pip:
  stage: build_test
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  image:
    name: debian:latest
  extends: .display_env
  script:
    - apt-get update
    - $APT_GET_INSTALL git npm pre-commit python3-pip
    - pip3 install --break-system-packages ".[pycodestyle, shellcheck, test]"
    - yaml2script --help
    - yaml2script all -parameter_check_command="-e SC1090" -verbose .gitlab-ci.yml
    - *test_pre-commit_yaml2script_check_01
    - pytest --numprocesses=auto --verbose tests/main.py

debian-latest-pip-system-packages:
  stage: build_test
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  image:
    name: debian:latest
  extends: .display_env
  script:
    - apt-get update
    - $APT_GET_INSTALL git npm pre-commit pycodestyle python3-pip python3-pytest python3-pytest-cov python3-pytest-xdist python3-yaml shellcheck
    - pip3 install --no-deps --break-system-packages .
    - yaml2script --help
    - yaml2script all -parameter_check_command="-e SC1090" .gitlab-ci.yml
    - *test_pre-commit_yaml2script_check_01
    - pytest-3 --numprocesses=auto --cov=yaml2script --cov-report=html:coverage_report/ --cov-report=term --cov-report=xml --verbose tests/main.py
    - $APT_GET_INSTALL curl latexmk texlive-latex-extra texlive-latex-recommended make python3-recommonmark python3-sphinx python3-sphinx-argparse rsync tex-gyre
    - ./create_doc
    - mv manual_yaml2script public
    # upload pdf manual
    - |
        curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "$PDFMANUAL" "$PDFMANUALURL"
    - echo "TAG=$(yaml2script version | cut -d ' ' -f 3)" > variables.env
    - cat variables.env
    - pip3 uninstall -y --break-system-packages yaml2script
  coverage: '/^TOTAL\s*[0-9]+\s*[0-9]+\s*([0-9]+\%)$/'
  artifacts:
    paths:
      - $PDFMANUAL
      - public
    reports:
      dotenv: variables.env
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

debian-latest-conda-miniforge:
  stage: build_test
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  image:
    name: debian:latest
  extends: .display_env
  script:
    - apt-get update
    - $APT_GET_INSTALL curl
    # install conda-forge
    - curl -L -O "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh"
    - bash "Miniforge3-$(uname)-$(uname -m).sh" -b
    - cat ~/miniforge3/.condarc
    - ~/miniforge3/bin/conda init
    - . ~/.bashrc
    # install yaml2script
    - pip3 install --root-user-action=ignore ".[shellcheck]"
    # very simple test
    - yaml2script --help
    - yaml2script all -parameter_check_command="-e SC1090" .gitlab-ci.yml
    # install pre-commit and pytest
    - $APT_GET_INSTALL git pre-commit python3-pytest python3-pytest-cov python3-pytest-xdist
    - pytest-3 --numprocesses=auto --cov=yaml2script --cov-report=html:coverage_report/ --cov-report=term --cov-report=xml --verbose tests/main.py

almalinux-latest-pipx:
  stage: build_test
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  image:
    name: almalinux:latest
  extends: .display_env
  script:
    - dnf install epel-release -y
    - dnf install -y git npm pipx python3-pytest python3-pytest-xdist
    - export PATH="$PATH":~/.local/bin
    - pipx install .
    - pipx install shellcheck-py
    - pipx install pycodestyle
    - pipx install pre-commit
    - yaml2script --help
    - yaml2script all -parameter_check_command="-e SC1090" .gitlab-ci.yml
    - *test_pre-commit_yaml2script_check_01
    - pytest-3 --numprocesses=auto --verbose tests/main.py
    - pipx uninstall yaml2script

ubuntu-latest-pipx:
  stage: build_test
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  image:
    name: ubuntu:latest
  extends: .display_env
  script:
    - apt-get update
    - $APT_GET_INSTALL git npm pipx pre-commit python3-pytest python3-pytest-xdist
    - export PATH="$PATH":~/.local/bin
    - pipx install .
    - pipx install shellcheck-py
    - pipx install pycodestyle
    - yaml2script --help
    - yaml2script all -parameter_check_command="-e SC1090" .gitlab-ci.yml
    - *test_pre-commit_yaml2script_check_01
    - pytest-3 --numprocesses=auto --verbose tests/main.py
    - pipx uninstall yaml2script

ubuntu-latest-conda-miniforge:
  stage: build_test
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  image:
    name: ubuntu:latest
  extends: .display_env
  script:
    - apt-get update
    - $APT_GET_INSTALL curl
    # install conda-forge
    - curl -L -O "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh"
    - bash "Miniforge3-$(uname)-$(uname -m).sh" -b
    - cat ~/miniforge3/.condarc
    - ~/miniforge3/bin/conda init
    - . ~/.bashrc
    # install yaml2script
    - pip3 install --root-user-action=ignore ".[shellcheck]"
    # very simple test
    - yaml2script --help
    - yaml2script all -parameter_check_command="-e SC1090" .gitlab-ci.yml
    # install pre-commit and pytest
    - $APT_GET_INSTALL git pre-commit python3-pytest python3-pytest-cov python3-pytest-xdist
    - pytest-3 --numprocesses=auto --cov=yaml2script --cov-report=html:coverage_report/ --cov-report=term --cov-report=xml --verbose tests/main.py

ubuntu-latest-conda-miniforge-simple:
  stage: pre
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - when: on_success
  image:
    name: ubuntu:latest
  extends: .display_env
  script:
    - apt-get update
    - $APT_GET_INSTALL curl
    # install conda-forge
    - curl -L -O "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh"
    - bash "Miniforge3-$(uname)-$(uname -m).sh" -b
    - cat ~/miniforge3/.condarc
    - ~/miniforge3/bin/conda init
    - export PATH="/root/miniforge3/bin:$PATH"
    - ~/miniforge3/bin/activate base
    # install yaml2script
    - pip3 install --root-user-action=ignore ".[shellcheck, pycodestyle, pylint]"
    # very simple test
    - yaml2script --help
    - yaml2script all -parameter_check_command="-e SC1090" .gitlab-ci.yml

release_job:
  stage: create_release
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_SERVER_HOST == "gitlab.com"
  image:
    # https://docs.gitlab.com/ee/user/project/releases/release_cicd_examples.html#create-release-metadata-in-a-custom-script
    registry.gitlab.com/gitlab-org/release-cli:latest
  extends: .display_env
  script:
    - echo "running release_job for $TAG"
    - wget "https://zenodo.org/badge/DOI/10.5281/zenodo.14962489.svg"
  release:
    name: 'yaml2script v$TAG'
    description: '$DESCRIPTION'
    tag_name: '$TAG'
    ref: '$CI_COMMIT_SHA'
    assets:
      links:
        - name: $PDFMANUAL
          filepath: /$PDFMANUAL
          url: $PDFMANUALURL
          link_type: other
  artifacts:
    paths:
      - "zenodo.14962489.svg"

trigger_check_release:
  stage: check_release
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_SERVER_HOST == "gitlab.com"
  variables:
    TAG: $TAG
    TAG_COMMIT_SHA: $CI_COMMIT_SHA
  trigger:
    project: yaml2script/check_release
    strategy: depend
    forward:
      yaml_variables: true
      pipeline_variables: false

pages:
  stage: deploy
  image:
    name: alpine:latest
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  extends: .display_env
  script:
    - apk add --no-cache pipx
    - export PATH="$PATH":"$HOME/.local/bin"
    - pipx install anybadge
    - anybadge -l "documentation as" -v "pdf" -f documentation_pdf.svg -c orange -o
    - anybadge -l "documentation as" -v "html" -f documentation_html.svg -c fuchsia -o
  artifacts:
    paths:
      - documentation_pdf.svg
      - documentation_html.svg
      - manual_yaml2script.pdf
      - public

trigger_deploy2zenodo:
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_SERVER_HOST == "gitlab.com"
  variables:
    TAG: $TAG
    TAG_COMMIT_SHA: $CI_COMMIT_SHA
    TAG_COMMIT_TIMESTAMP: $CI_COMMIT_TIMESTAMP
  trigger:
    project: daniel_mohr/deploy_yaml2script_to_zenodo
    strategy: depend
    forward:
      yaml_variables: true
      pipeline_variables: false
